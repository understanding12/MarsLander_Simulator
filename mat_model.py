import numpy as np
import matplotlib.pyplot as plt

planets = {
    "Mars": {"g": 3.71, "rho0": 0.02, "H": 11000},
}

planet = "Mars"  # –í—ã–±—Ä–∞–Ω–Ω–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –¥–ª—è –ø–æ—Å–∞–¥–∫–∏
p = planets[planet]  # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–ª–∞–Ω–µ—Ç—ã

print(f"=== –û–ü–¢–ò–ú–ê–õ–¨–ù–ê–Ø –ü–û–°–ê–î–ö–ê –ù–ê {planet} ===")
print(f"g = {p['g']} –º/—Å¬≤, œÅ‚ÇÄ = {p['rho0']} –∫–≥/–º¬≥, H = {p['H']} –º\n")

# –ü–ê–†–ê–ú–ï–¢–†–´ –ê–ü–ü–ê–†–ê–¢–ê
dry_mass = 2000  # –°—É—Ö–∞—è –º–∞—Å—Å–∞ –∞–ø–ø–∞—Ä–∞—Ç–∞ (–∫–≥)
fuel_mass = 480  # –ù–∞—á–∞–ª—å–Ω–∞—è –º–∞—Å—Å–∞ —Ç–æ–ø–ª–∏–≤–∞ (–∫–≥)
mdot = 8  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ (–∫–≥/—Å)
A_body = 15  # –ü–ª–æ—â–∞–¥—å –ø–æ–ø–µ—Ä–µ—á–Ω–æ–≥–æ —Å–µ—á–µ–Ω–∏—è –∫–æ—Ä–ø—É—Å–∞ (–º¬≤)
A_chute = 400  # –ü–ª–æ—â–∞–¥—å –ø–∞—Ä–∞—à—é—Ç–∞ (–º¬≤)
Cd_body = 1.2  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –∫–æ—Ä–ø—É—Å–∞
Cd_chute = 1.8  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞—à—é—Ç–∞
T_max = 35000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç—è–≥–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ù)

# –ù–ê–ß–ê–õ–¨–ù–´–ï –£–°–õ–û–í–ò–Ø
h = 12000.0  # –ù–∞—á–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ (–º)
v = -290.0  # –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (–º/—Å) - –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è, —Ç.–∫. –≤–Ω–∏–∑
m = dry_mass + fuel_mass  # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–ª–Ω–∞—è –º–∞—Å—Å–∞ (–∫–≥)
t = 0.0  # –ù–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (—Å)
dt = 0.1  # –®–∞–≥ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è (—Å)

# –ü–ê–†–ê–ú–ï–¢–†–´ –ü–û–°–ê–î–ö–ò
target_speed_final = -0.5  # –¶–µ–ª–µ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–∏ –ø–æ—Å–∞–¥–∫–µ (–º/—Å)
parachute_alt = 11000  # –í—ã—Å–æ—Ç–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–∞—Ä–∞—à—é—Ç–∞ (–º)
engine_start_alt = 5000  # –í—ã—Å–æ—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π (–º)
touchdown_alt = 0.0  # –í—ã—Å–æ—Ç–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ (–º)

# –§–õ–ê–ì–ò –°–û–°–¢–û–Ø–ù–ò–Ø
parachute = False  # –ü–∞—Ä–∞—à—é—Ç —Ä–∞—Å–∫—Ä—ã—Ç?
engine = False  # –î–≤–∏–≥–∞—Ç–µ–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã?
crashed = False  # –ê–≤–∞—Ä–∏–π–Ω–∞—è –ø–æ—Å–∞–¥–∫–∞?
fuel = fuel_mass  # –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø–ª–∏–≤–∞
final_phase = False  # –§–∏–Ω–∞–ª—å–Ω–∞—è —Ñ–∞–∑–∞ –ø–æ—Å–∞–¥–∫–∏?

# –ü–ê–†–ê–ú–ï–¢–†–´ –ü–ò–î-–†–ï–ì–£–õ–Ø–¢–û–†–ê
Kp = 3000.0  # –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
Ki = 80.0  # –ò–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
Kd = 600.0  # –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
integral = 0.0  # –ò–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–∞—è —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è
prev_error = 0.0  # –ü—Ä–µ–¥—ã–¥—É—â–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è
prev_T = 0.0  # –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç—è–≥–∏
max_thrust_rate = 3000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—è–≥–∏ (–ù/—Å)

# –ú–ê–°–°–ò–í–´ –î–õ–Ø –•–†–ê–ù–ï–ù–ò–Ø –ò–°–¢–û–†–ò–ò
time_hist, h_hist, v_hist, T_hist, a_hist, m_hist, fuel_hist = [], [], [], [], [], [], []

print("üöÄ –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ...\n")

# –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –ú–û–î–ï–õ–ò–†–û–í–ê–ù–ò–Ø
while h > touchdown_alt and t < 1000:
    # –†–∞—Å—á–µ—Ç –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã (—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å)
    rho = p['rho0'] * np.exp(-h / p['H'])

    # –í—ã–±–æ—Ä –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if parachute:
        Cd = Cd_chute  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è —Å –ø–∞—Ä–∞—à—é—Ç–æ–º
        A = A_chute  # –ü–ª–æ—â–∞–¥—å —Å –ø–∞—Ä–∞—à—é—Ç–æ–º
    else:
        Cd = Cd_body  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –∫–æ—Ä–ø—É—Å–∞
        A = A_body  # –ü–ª–æ—â–∞–¥—å –∫–æ—Ä–ø—É—Å–∞

    # –†–∞—Å—á–µ—Ç —Å–∏–ª—ã –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
    # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫ - —Å–∏–ª–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ—Ç–∏–≤ –¥–≤–∏–∂–µ–Ω–∏—è
    D = -0.5 * rho * Cd * A * v * abs(v)

    # –õ–û–ì–ò–ö–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–°–ê–î–ö–û–ô

    # –†–∞—Å–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä–∞—à—é—Ç–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–Ω–æ–π –≤—ã—Å–æ—Ç—ã
    if not parachute and h < parachute_alt:
        parachute = True
        print(f"{t:6.1f} c | –ü–∞—Ä–∞—à—é—Ç —Ä–∞—Å–∫—Ä—ã—Ç (h={h:.0f} –º, v={abs(v):.1f} –º/—Å)")

    # –í–∫–ª—é—á–µ–Ω–∏–µ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–∞—Ä–∞—à—é—Ç–∞
    if not engine and parachute and h < engine_start_alt:
        engine = True
        print(f"{t:6.1f} c | –î–≤–∏–≥–∞—Ç–µ–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã! (h={h:.0f} –º, v={abs(v):.1f} –º/—Å)")

    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ñ–∞–∑—É –ø–æ—Å–∞–¥–∫–∏
    if not final_phase and h < 200:
        final_phase = True
        print(f"{t:6.1f} c | –§–∏–Ω–∞–ª—å–Ω–∞—è —Ñ–∞–∑–∞ (h={h:.0f} –º)")

    # –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–í–ò–ì–ê–¢–ï–õ–Ø–ú–ò (–ü–ò–î-—Ä–µ–≥—É–ª—è—Ç–æ—Ä)
    T = 0  # –¢—è–≥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if engine and fuel > 0:
        current_speed = abs(v)

        # –í–´–ë–û–† –¶–ï–õ–ï–í–û–ô –°–ö–û–†–û–°–¢–ò –í –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –û–¢ –í–´–°–û–¢–´
        # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–∏ —Å–Ω–∏–∂–µ–Ω–∏–∏
        if h > 2000:
            target_speed = -25
        elif h > 1000:
            target_speed = -15
        elif h > 500:
            target_speed = -8
        elif h > 300:
            target_speed = -5
        elif h > 200:
            target_speed = -3
        elif h > 100:
            target_speed = -1.5
        elif h > 50:
            target_speed = -1.0
        else:
            target_speed = target_speed_final

        # –†–ê–°–ß–ï–¢ –ü–ò–î-–†–ï–ì–£–õ–Ø–¢–û–†–ê
        error = target_speed - v  # –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

        # –ò–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–∞—è —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º)
        integral += error * dt * 0.02
        integral = np.clip(integral, -40, 40)

        # –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è
        derivative = (error - prev_error) / dt if t > 0 else 0

        # –†–∞—Å—á–µ—Ç —Å—ã—Ä–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ç—è–≥–∏
        T_raw = Kp * error + Ki * integral + Kd * derivative
        T_raw = max(0, min(T_raw, T_max))  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—è–≥–∏
        max_change = max_thrust_rate * dt
        T = np.clip(T_raw, prev_T - max_change, prev_T + max_change)

        # –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ —Ç—è–≥–∏ (—Ñ–∏–ª—å—Ç—Ä –Ω–∏–∑–∫–∏—Ö —á–∞—Å—Ç–æ—Ç)
        smoothing_factor = 0.7
        T = prev_T * smoothing_factor + T * (1 - smoothing_factor)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        prev_T = T
        prev_error = error

        # –†–ê–°–•–û–î –¢–û–ü–õ–ò–í–ê
        thrust_ratio = T / T_max
        fuel_consumption = mdot * dt * thrust_ratio

        # –≠–∫–æ–Ω–æ–º–∏—è —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ –º–∞–ª—ã—Ö –≤—ã—Å–æ—Ç–∞—Ö –ø—Ä–∏ –µ–≥–æ –Ω–µ—Ö–≤–∞—Ç–∫–µ
        if h < 100 and fuel < 30:
            fuel_consumption *= 0.3

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–ø–ª–∏–≤–∞
        if fuel_consumption > fuel:
            fuel_consumption = fuel
            T = T * (fuel / fuel_consumption) if fuel_consumption > 0 else 0

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–ø–ª–∏–≤–∞ –∏ –º–∞—Å—Å—ã
        fuel -= fuel_consumption
        m = dry_mass + fuel

        # –í–´–í–û–î –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ü–û–°–ê–î–ö–ï
        if engine and t % 5 < dt and h > 10:
            current_g = abs((T + D) / (m * p['g'])) if m > 0 else 0
            print(
                f"{t:6.1f} c | h={h:.0f} –º, v={abs(v):.1f} –º/—Å, T={T:.0f} –ù, g={current_g:.1f}, —Ç–æ–ø–ª–∏–≤–æ={fuel:.0f} –∫–≥")
    else:
        # –°–±—Ä–æ—Å —Ç—è–≥–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã—Ö –¥–≤–∏–≥–∞—Ç–µ–ª—è—Ö
        T = 0
        prev_T = 0

    # –†–ê–°–ß–ï–¢ –î–ò–ù–ê–ú–ò–ö–ò (–£–†–ê–í–ù–ï–ù–ò–Ø –î–í–ò–ñ–ï–ù–ò–Ø)

    # –°—É–º–º–∞—Ä–Ω–∞—è —Å–∏–ª–∞: –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è + —Ç—è–≥–∞ + —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ
    F_total = -m * p['g'] + T + D

    # –£—Å–∫–æ—Ä–µ–Ω–∏–µ –ø–æ –≤—Ç–æ—Ä–æ–º—É –∑–∞–∫–æ–Ω—É –ù—å—é—Ç–æ–Ω–∞
    a = F_total / m

    # –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ò–ï –£–†–ê–í–ù–ï–ù–ò–ô –î–í–ò–ñ–ï–ù–ò–Ø (–ú–ï–¢–û–î –≠–ô–õ–ï–†–ê)
    v += a * dt  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
    h += v * dt  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã
    t += dt  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏

    # –ü–†–û–í–ï–†–ö–ê –ö–ê–°–ê–ù–ò–Ø –ü–û–í–ï–†–•–ù–û–°–¢–ò
    if h <= 0:
        landing_speed = abs(v)
        if landing_speed > 5:
            crashed = True
        break

    # –°–û–•–†–ê–ù–ï–ù–ò–ï –ò–°–¢–û–†–ò–ò –î–õ–Ø –ì–†–ê–§–ò–ö–û–í
    time_hist.append(t)
    h_hist.append(h)
    v_hist.append(v)
    T_hist.append(T)
    a_hist.append(a)
    m_hist.append(m)
    fuel_hist.append(fuel)

# –í–´–í–û–î –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ü–û–°–ê–î–ö–ò
print("\n" + "=" * 60)
print("--- –†–ï–ó–£–õ–¨–¢–ê–¢ ---")
print(f"–ü–ª–∞–Ω–µ—Ç–∞: {planet}")
if h_hist:
    final_speed = abs(v_hist[-1])
else:
    final_speed = abs(v)
print(f"–ö–æ–Ω–µ—á–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {final_speed:.2f} –º/—Å")
print(f"–û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–ø–ª–∏–≤–∞: {fuel:.1f} –∫–≥")
print(f"–û–±—â–µ–µ –≤—Ä–µ–º—è: {t:.1f} —Å")
print(f"–§–∏–Ω–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞: {h:.2f} –º")

# –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ü–û–°–ê–î–ö–ò
if h > 0:
    print("‚ùå –ê–ø–ø–∞—Ä–∞—Ç –Ω–µ –¥–æ—Å—Ç–∏–≥ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏!")
elif crashed:
    print("–ü–æ—Å–∞–¥–∫–∞ –∞–≤–∞—Ä–∏–π–Ω–∞—è!")
elif final_speed > 3:
    print("–ü–æ—Å–∞–¥–∫–∞ –∂—ë—Å—Ç–∫–∞—è, –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω—ã.")
elif final_speed > 1.5:
    print("–ü–æ—Å–∞–¥–∫–∞ —É—Å–ø–µ—à–Ω–∞—è!")
elif final_speed > 0.8:
    print("–ü–æ—Å–∞–¥–∫–∞ –º—è–≥–∫–∞—è!")
else:
    print("–ò–î–ï–ê–õ–¨–ù–ê–Ø –ü–û–°–ê–î–ö–ê!")

# –ü–û–°–¢–†–û–ï–ù–ò–ï –ì–†–ê–§–ò–ö–û–í
if time_hist:
    plt.figure(figsize=(15, 10))

    # 1. –ì–†–ê–§–ò–ö –í–´–°–û–¢–´
    plt.subplot(2, 3, 1)
    plt.plot(time_hist, h_hist, 'b-', linewidth=2)
    plt.axhline(y=parachute_alt, color='r', linestyle='--', alpha=0.7, label='–ü–∞—Ä–∞—à—é—Ç')
    plt.axhline(y=engine_start_alt, color='orange', linestyle='--', alpha=0.7, label='–î–≤–∏–≥–∞—Ç–µ–ª–∏')
    plt.axhline(y=200, color='green', linestyle='--', alpha=0.7, label='–§–∏–Ω–∞–ª—å–Ω–∞—è —Ñ–∞–∑–∞')
    plt.ylabel("–í—ã—Å–æ—Ç–∞ (–º)")
    plt.title(f"–ü–æ—Å–∞–¥–∫–∞ –Ω–∞ {planet}")
    plt.legend()
    plt.grid(True)

    # 2. –ì–†–ê–§–ò–ö –°–ö–û–†–û–°–¢–ò
    plt.subplot(2, 3, 2)
    plt.plot(time_hist, [abs(v) for v in v_hist], 'orange', linewidth=2)
    plt.axhline(y=abs(target_speed_final), color='red', linestyle='--', alpha=0.7, label='–¶–µ–ª–µ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å')
    plt.ylabel("–°–∫–æ—Ä–æ—Å—Ç—å (–º/—Å)")
    plt.legend()
    plt.grid(True)

    # 3. –ì–†–ê–§–ò–ö –¢–Ø–ì–ò
    plt.subplot(2, 3, 3)
    plt.plot(time_hist, T_hist, 'g-', linewidth=2)
    plt.ylabel("–¢—è–≥–∞ (–ù)")
    plt.xlabel("–í—Ä–µ–º—è (—Å)")
    plt.grid(True)

    # 4. –ì–†–ê–§–ò–ö –ú–ê–°–°–´
    plt.subplot(2, 3, 4)
    plt.plot(time_hist, m_hist, 'brown', linewidth=2)
    plt.ylabel("–ú–∞—Å—Å–∞ (–∫–≥)")
    plt.xlabel("–í—Ä–µ–º—è (—Å)")
    plt.grid(True)

    # 5. –ì–†–ê–§–ò–ö –ò–ó–ú–ï–ù–ï–ù–ò–Ø –¢–Ø–ì–ò
    plt.subplot(2, 3, 5)
    thrust_changes = [abs(T_hist[i] - T_hist[i - 1]) for i in range(1, len(T_hist))]
    plt.plot(time_hist[1:], thrust_changes, 'red', linewidth=1)
    plt.axhline(y=max_thrust_rate * dt, color='black', linestyle='--', label='–ú–∞–∫—Å. –∏–∑–º–µ–Ω–µ–Ω–∏–µ')
    plt.ylabel("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç—è–≥–∏ (–ù/—à–∞–≥)")
    plt.xlabel("–í—Ä–µ–º—è (—Å)")
    plt.legend()
    plt.grid(True)

    # 6. –ì–†–ê–§–ò–ö –¢–û–ü–õ–ò–í–ê
    plt.subplot(2, 3, 6)
    plt.plot(time_hist, fuel_hist, 'purple', linewidth=2)
    plt.ylabel("–¢–æ–ø–ª–∏–≤–æ (–∫–≥)")
    plt.xlabel("–í—Ä–µ–º—è (—Å)")
    plt.grid(True)

    plt.tight_layout()
    plt.show()

    # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´
    print(f"\n--- –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ ---")
    if time_hist:
        max_g = max([abs(a) / p['g'] for a in a_hist])
        min_speed = min([abs(v) for v in v_hist])
        max_speed = max([abs(v) for v in v_hist])

        print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞: {max_g:.1f} g")
        print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {min_speed:.1f} –º/—Å")
        print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {max_speed:.1f} –º/—Å")

        # –ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç—ã –¥–≤–∏–≥–∞—Ç–µ–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        thrust_changes = [abs(T_hist[i] - T_hist[i - 1]) for i in range(1, len(T_hist))]
        max_thrust_change = max(thrust_changes) if thrust_changes else 0
        avg_thrust_change = np.mean(thrust_changes) if thrust_changes else 0
        print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç—è–≥–∏ –∑–∞ —à–∞–≥: {max_thrust_change:.0f} –ù")
        print(f"–°—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç—è–≥–∏ –∑–∞ —à–∞–≥: {avg_thrust_change:.0f} –ù")

        engine_on_indices = [i for i, T in enumerate(T_hist) if T > 0]
        if engine_on_indices:
            first_engine_idx = engine_on_indices[0]
            engine_on_height = h_hist[first_engine_idx]
            engine_on_speed = abs(v_hist[first_engine_idx])
            print(f"–î–≤–∏–≥–∞—Ç–µ–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã –Ω–∞ –≤—ã—Å–æ—Ç–µ: {engine_on_height:.0f} –º")
            print(f"–°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏: {engine_on_speed:.1f} –º/—Å")

            engine_work_time = len(engine_on_indices) * dt
            print(f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π: {engine_work_time:.1f} —Å")

            avg_thrust = np.mean([T_hist[i] for i in engine_on_indices])
            print(f"–°—Ä–µ–¥–Ω—è—è —Ç—è–≥–∞: {avg_thrust:.0f} –ù")

            max_thrust = max(T_hist)
            print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç—è–≥–∞: {max_thrust:.0f} –ù")

            fuel_used = fuel_mass - fuel
            thrust_efficiency = (avg_thrust * engine_work_time) / (fuel_used * 1000) if fuel_used > 0 else 0
            print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–ø–ª–∏–≤–∞: {fuel_used:.1f} –∫–≥")
            print(f"–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç—è–≥–∏: {thrust_efficiency:.2f} –ù¬∑—Å/–∫–≥")

        # –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞—à—é—Ç–∞
        if parachute:
            parachute_indices = [i for i, h_val in enumerate(h_hist) if h_val < parachute_alt]
            if parachute_indices:
                parachute_idx = parachute_indices[0]
                if parachute_idx > 0 and engine_on_indices:
                    speed_before_parachute = abs(v_hist[parachute_idx - 1])
                    speed_before_engine = abs(v_hist[engine_on_indices[0] - 1])
                    print(f"–°–∫–æ—Ä–æ—Å—Ç—å –¥–æ –ø–∞—Ä–∞—à—é—Ç–∞: {speed_before_parachute:.1f} –º/—Å")
                    print(f"–°–∫–æ—Ä–æ—Å—Ç—å –¥–æ –≤–∫–ª—é—á–µ–Ω–∏—è –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π: {speed_before_engine:.1f} –º/—Å")
                    parachute_efficiency = (
                            (speed_before_parachute - speed_before_engine) / speed_before_parachute * 100)
                    print(f"–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞—Ä–∞—à—é—Ç–∞: {parachute_efficiency:.1f}%")

# –û–¶–ï–ù–ö–ê –ú–ò–°–°–ò–ò
print(f"\n--- –û–¶–ï–ù–ö–ê –ú–ò–°–°–ò–ò ---")
if not crashed and final_speed <= 3:

    # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ—Å–∞–¥–∫–∏ –ø–æ –∫–æ–Ω–µ—á–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
    if final_speed <= 0.5:
        landing_quality = "–ò–î–ï–ê–õ–¨–ù–ê–Ø"
        landing_score = 30
    elif final_speed <= 1.0:
        landing_quality = "–û–¢–õ–ò–ß–ù–ê–Ø"
        landing_score = 28
    elif final_speed <= 1.5:
        landing_quality = "–û–ß–ï–ù–¨ –•–û–†–û–®–ê–Ø"
        landing_score = 25
    elif final_speed <= 2.0:
        landing_quality = "–•–û–†–û–®–ê–Ø"
        landing_score = 22
    else:
        landing_quality = "–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–ê–Ø"
        landing_score = 18

    # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞ –º–∏—Å—Å–∏–∏

    print(f"–ö–∞—á–µ—Å—Ç–≤–æ –ø–æ—Å–∞–¥–∫–∏: {landing_quality}")
    print(f"–û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–ø–ª–∏–≤–∞: {fuel:.1f} –∫–≥")

print(f"\n=== –°–ò–ú–£–õ–Ø–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê ===")